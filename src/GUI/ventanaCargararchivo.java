/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author joseg
 */
public class ventanaCargararchivo extends javax.swing.JFrame {
    
    public static Menu1AgregarEliminarCargarIniciar vCargararchivo;

    /**
     * Creates new form ventanaCargararchivo
     */
    public ventanaCargararchivo(Menu1AgregarEliminarCargarIniciar vCargararchivo) {
        initComponents();
        this.vCargararchivo=vCargararchivo;
        vCargararchivo.setVisible(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayArchivotxt = new javax.swing.JTextField();
        buscarTxt = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayContenidotxt = new javax.swing.JTextArea();
        volverMenu1cargar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(displayArchivotxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 100, -1));

        buscarTxt.setText("...");
        buscarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarTxtActionPerformed(evt);
            }
        });
        getContentPane().add(buscarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, -1));

        jLabel13.setText("Introduce el archivo txt necesario:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 430, -1));

        displayContenidotxt.setColumns(20);
        displayContenidotxt.setRows(5);
        jScrollPane1.setViewportView(displayContenidotxt);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 230, 250));

        volverMenu1cargar.setText("Volver a menu");
        volverMenu1cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverMenu1cargarActionPerformed(evt);
            }
        });
        getContentPane().add(volverMenu1cargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarTxtActionPerformed
JFileChooser fileChooser=new JFileChooser();
/**OpenDialog es para abrir la ventana. 
 * @param this es para pasarle de parametro la clase padre
 * 
 * Abre la ventana y cuando le demos aceptar va a hacer todo.
 * 
 * Antes del código para seleccionar archivos se aplica un filtro para solo obtener archivos TXT
 * 
 *@param .txt en la función de filenameextension filter sirve para indicar que solo se necesitan TXT; sirve para que el ussuario no ponga otro tipo de archivo que no sea este.
 */

FileNameExtensionFilter filtro=new FileNameExtensionFilter("*.TXT", "txt");

/**
 * @param filtro es para indicar cual filtro se va a utilizar. En este caso se va a usar nuestro filtro "filtro".
 */
fileChooser.setFileFilter(filtro);

int seleccionArchivo=fileChooser.showOpenDialog(this);
//En el opendialog tiene que existir el archivo, en el savedialog, no tiene porque existir.

if(seleccionArchivo==JFileChooser.APPROVE_OPTION){
    //tengo que hacer el file
    File carpeta=fileChooser.getSelectedFile();
    
    
    //aquí mostramos en una caja de texto pequeña la ruta del objeto clase Archivo
    this.displayArchivotxt.setText(carpeta.getAbsolutePath());
    try(FileReader Lector=new FileReader(carpeta)){ //aquí se crea el lector de archivos
        String cadena="";
        int valor=Lector.read(); 
        while(valor!=-1){
            cadena=cadena+(char) valor;
            valor=Lector.read();
        }
        this.displayContenidotxt.setText(cadena);
        /**
         * El this.dispose lo tengo puesto para que se elimine la ventana desde donde se carga el archivo. Y posteriori correr el siguiente programa.
         * 
         * Este es el espacio para que el archivo lea el programa 
         */
    } catch(IOException e1){
        e1.printStackTrace();
    }
}
/**
 * 
 */

    }//GEN-LAST:event_buscarTxtActionPerformed

    private void volverMenu1cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverMenu1cargarActionPerformed
        this.toBack();
setVisible(false); /**
 * @param false es para indicar que al devolverse en el programa, esta ventana "this" requiere irse.
 */
new GUI.Menu1AgregarEliminarCargarIniciar().setState(java.awt.Frame.NORMAL);
/**
 * @param NORMAL en setState es para indicar que es la ventana referenciada es el estado "normal" de una aplicación.
 */
    }//GEN-LAST:event_volverMenu1cargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaCargararchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaCargararchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaCargararchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaCargararchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaCargararchivo(vCargararchivo).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarTxt;
    private javax.swing.JTextField displayArchivotxt;
    private javax.swing.JTextArea displayContenidotxt;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton volverMenu1cargar;
    // End of variables declaration//GEN-END:variables
}
